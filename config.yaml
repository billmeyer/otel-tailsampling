# CONNECTORS##################################################
connectors:
  datadog/connector:
    traces:
      ## @param span_name_as_resource_name - use OpenTelemetry semantic convention for span naming - optional
      ## Option created to maintain similarity with the OpenTelemetry semantic conventions as discussed in the issue below.
      ## https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/1909
      span_name_as_resource_name: true

      ## @param compute_stats_by_span_kind - enables APM stats computation based on `span.kind` - optional
      ## If set to true, enables an additional stats computation check on spans to see they have an eligible `span.kind` (server, consumer, client, producer).
      ## If enabled, a span with an eligible `span.kind` will have stats computed. If disabled, only top-level and measured spans will have stats computed.
      ## NOTE: For stats computed from OTel traces, only top-level spans are considered when this option is off.
      compute_stats_by_span_kind: true

      ## @param bucket_interval specifies the time interval size of aggregation buckets that aggregate the Datadog trace metrics.
      ## It is also the time interval that Datadog trace metrics payloads are flushed to the pipeline.
      ## If you are concerned about the metric volume generated by the Datadog connector and the resulting networking egress, try increasing bucket_interval.
      ## Default is 10s if unset.
      # bucket_interval: 30s
    
# RECEIVERS ##################################################
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

  prometheus:
    config:
      scrape_configs:
      - job_name: opentelemetry-collector
        scrape_interval: 30s
        static_configs:
        - targets:
          - 127.0.0.1:8888

# PROCESSORS #################################################
processors:
  attributes/semantics:
    actions:
      # See https://opentelemetry.io/docs/specs/semconv/attributes-registry/deployment/
      # Datadog Note: The `deployment.environment` key gets mapped to the `env` key in the Datadog UI. 
      - key: "deployment.environment"
        value: "otel"
        action: upsert

  batch:

  resourcedetection:
    detectors:
      - env
      - system

  tail_sampling:
    decision_wait: 1s
    expected_new_traces_per_sec: 100
    policies:
    # Policy #1
    - name: env-based-sampling-policy
      type: and
      and:
        and_sub_policy:
        - name: env-prefix-policy
          type: string_attribute
          string_attribute:
            key: env
            values:
            - dev
            - dev1-eus2
            - qa01-eus2
        - name: env_sample-policy
          type: always_sample

    # Policy #2
    - name: non-sampling-service-sampling-policy
      type: and
      and:
        and_sub_policy:
        - name: non-sampling-service-prefix-policy
          type: string_attribute
          string_attribute:
            key: service.name
            values:
            - checkout-worker
            invert_match: true
        - name: non-sampling-service-always-sample-policy
          type: always_sample

    # Policy #3
    - name: checkout-worker-sampling-policy
      type: and
      and:
        and_sub_policy:
        - name: checkout-worker-prefix-policy
          type: string_attribute
          string_attribute:
            key: service.name
            values:
            - checkout-worker
        - name: checkout-worker-always-sample-policy
          type: always_sample
#        - name: checkout-worker-probabilistic-policy
#          type: probabilistic
#          probabilistic:
#            sampling_percentage: 20

  # https://docs.datadoghq.com/opentelemetry/guide/otlp_delta_temporality/#converting-to-delta-temporality-on-the-collector
  cumulativetodelta:

# EXPORTERS ##################################################
exporters:
  debug:
    verbosity: detailed

  file:
    path: /tmp/otelcol.json

  datadog:
    api:
      site: ${DD_SITE_PARAMETER}
      key: ${DD_API_KEY}
    hostname: nop

  nop:

# SERVICE ####################################################
service:
  telemetry:
    # Enable health monitoring of the Collector instance
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: 127.0.0.1
                port: 8888      
    logs:
      level: info

  pipelines:
    metrics:
      receivers:
        - otlp
        - prometheus
        - datadog/connector
      processors:
        - attributes/semantics
        - resourcedetection
        - cumulativetodelta
        - batch
      exporters:
#        - debug
        - datadog

    logs:
      receivers: [ otlp ]
      processors:
        - attributes/semantics
        - resourcedetection
        - batch
      exporters: 
#        - debug
        - datadog
        # - file

    traces:
      receivers:
        - otlp
      processors:
        - attributes/semantics
        - resourcedetection
        - tail_sampling
        - batch
      exporters:
        - file
        - debug
        - datadog/connector
        - datadog